---
title: "Assignment 1"
---

**Veri Bilimi ve Endüstri Mühendisliği Üzerine Sohbetler - Mustafa Baydoğan & Erdi Daşdemir**

Mustafa Baydoğan and Erdi Daşdemir discuss various topics related to data science and industrial engineering in their YouTube chats. They share their background and experience in the field, including data analysis, machine learning and optimisation research. Another topic they addressed was the preference for certain types of wood in the construction industry, namely straight and trapezoidal timber. They emphasised the importance of understanding the underlying reasons for these characteristics in order to use wood effectively in construction projects. The talk also covered the importance of data pre-processing, especially in the context of image analysis, machine learning algorithms, and the differences between traditional and deep learning. They discussed the importance of understanding the problem at hand and selecting appropriate machine learning techniques to create effective industry solutions. In addition, they emphasised the importance of making accurate predictions in the market to maintain balance. Overall, they emphasised the importance of both traditional and deep learning methods in data science and the importance of understanding the underlying problem at hand and choosing the appropriate techniques to create effective industry solutions. They also explore methods to minimise errors in regression analysis and to improve optimisation methods used in machine learning. They talk about the importance of gaining expertise in data science through practical applications, experience and formal education. In another part of the talk, they share their experiences in the energy sector and participate in forecasting competitions. They emphasise the importance of continuous learning, collaboration and knowledge sharing on the web. Throughout the talk, they emphasise the importance of starting early, being persistent and staying up-to-date with the latest research and technologies in their field.

**MTCARS Analizi**

```{r}
library(dslabs)
data(mtcars)
#compute_stats fonksiyonunu oluşturuldu
compute_stats <- function(x) {
  if (!is.numeric(x)) {
    stop("Girdi sayısal bir vektör olmalıdır.") #Input değeri vektör değilse fonksiyonu durduracak şekilde koşullu durum eklendi
  }
  #İstenilen istatistiksel değerler liste haline getirildi
  statistics_list <- list(
    mean = mean(x),       # Ortalama değer
    median = median(x),   # Medyan değeri
    variance = var(x),    # Varyans değeri
    IQR = IQR(x),         # Çeyrekler arası açıklık (IQR) değeri
    min = min(x),         # Minimum değer
    max = max(x)          # Maksimum değer
  )
  
  return(statistics_list)
}

# mtcars veri setindeki 'hp' sütunu üzerinde fonksiyonu test edelim
result <- compute_stats(mtcars$hp)
# Sonuçları ekrana yazdıralım
print(result)


```

```{r}
data(mtcars)

#compute_stats fonksiyonunu oluşturuldu
compute_stats <- function(x) {
  
  statistics_list <- list(
    mean = mean(x),       # Ortalama değer
    median = median(x),   # Medyan değeri
    variance = var(x),    # Varyans değeri
    IQR = IQR(x),         # Çeyrekler arası açıklık (IQR) değeri
    min = min(x),         # Minimum değer
    max = max(x)          # Maksimum değer
  )
  
  return(statistics_list)
}

# Her satırın istatistiksel değerleri için for döngüsü eklendi
for (column_name in colnames(mtcars)) {
  
  

    # Sütun adıyla birlikte sonuçlar yazdırıldı
    print(paste(column_name,"icin istatistikler"))
    print(compute_stats(mtcars$mpg))
}


```

```{r}
library(dslabs)
data(mtcars)
compute_stats <- function(x) {
  #birden fazla değeri c'de birleştirdik
  c(mean = mean(x), 
    median = median(x), 
    variance = var(x), 
    IQR = IQR(x), 
    min = min(x), 
    max = max(x))
}

# Fonksiyonu tüm satırlar için uygula
sapply(mtcars, compute_stats)

# Fonksiyonu tüm satırlar için uygula (satır bazlı işlemlerde margin değeri 1 alınır, sütün bazlı işlemlerde ise 2)
apply(mtcars,2,  compute_stats)

```
**NA Example**
```{r}
library(dslabs)

# na_example veri setini yükle
data("na_example")

# Veri setini görüntüle
print(na_example)
```
```{r}
library(dslabs)
data(na_example)

# NA değerlerinin toplam sayısını bul
total_na <- sum(is.na(na_example))
total_na  # Toplam NA sayısını ekrana yazdırır

# NA değerlerinin indekslerini bul
na_indices <- which(is.na(na_example))
na_indices  # NA değerlerinin indeks pozisyonlarını ekrana yazdırır
```

```{r}
library(dslabs)
data(na_example)

# NA değerleri göz ardı edilerek ortalama ve standart sapma hesapla
mean <- mean(na_example, na.rm = TRUE)
std_dev <- sd(na_example, na.rm = TRUE)

# Sonuçları görüntüle
mean
std_dev
```
```{r}
library(dslabs)
data(na_example)

# NA değerlerinin medyan ile değiştirilmesi
replace_na_with_median <- function(x) {
  # Sadece NA değerlerinin olduğu kısımları medyan ile değiştir
  median_value <- median(x, na.rm = TRUE)  # NA'ları göz ardı ederek medyan hesapla
  x[is.na(x)] <- median_value  # NA olan yerleri medyan ile değiştir
  return(x)
}

# Version 1: NA'ları medyan ile değiştirilmiş veri seti
na_example<- replace_na_with_median(na_example)

# Sonuçları göster
na_example
```


```{r}
library(dslabs)
data(na_example)

# NA değerlerini rastgele bir non-NA değer ile değiştirme fonksiyonu
replace_na_with_random <- function(x) {
  # Geçerli (non-NA) değerleri al
  non_na_values <- x[!is.na(x)]
  
  # Eğer hiç geçerli değer yoksa hata verme
  if (length(non_na_values) == 0) {
    stop("Veri setinde hiç geçerli (non-NA) değer bulunamadı.")
  }
  
  # Her NA değerine rastgele bir non-NA değer atama
  x[is.na(x)] <- sample(non_na_values, sum(is.na(x)), replace = TRUE)
  return(x)
}

# Version 2: NA'ları rastgele bir geçerli değer ile değiştirilmiş veri seti
na_example <- replace_na_with_random(na_example)

# Sonuçları göster
print(na_example)


```





